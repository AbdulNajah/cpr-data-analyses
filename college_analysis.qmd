---
title: "College - All India"
format:
  html:
    toc: true
    code-fold: show
execute: 
  error: true
  warning: true
---

## Data Processing

```{r}
#reading the libraries
knitr::opts_chunk$set(cache = FALSE,echo = TRUE, message=FALSE, warning = FALSE)

library(dplyr)
library(stringr)
library(stargazer)

```

### College data

```{r}
#reading the college data'
path = "/Users/najah/work/cpr/data/"
college_pc= read.csv(paste0(path,"college_pc_ag.csv"))
colleges = read.csv(paste0(path, "college_clean.csv"))

```

```{r}
print(paste("Number of colleges that are mapped on the constituencies:", nrow(colleges)))

```

```{r}
print(names(colleges))
```

-   respective constituencies where extracted using the post and pre-delim shape files.
-   this cleaned file doesn't have the ones established before 1989. they have been removed

```{r}
table(colleges$del)

```

```{r}

n_col_yr = as.data.frame(table(colleges$year_estd))

barplot( n_col_yr$Freq, names.arg = n_col_yr$Var1, main = "Number of colleges established by year")

```

```{r}
# colleges by type

table(colleges$management)
```

```{r}
# government colleges
gov_college =ifelse(grepl("\\bprivate\\b", colleges$management, ignore.case = TRUE),0,1)


table(gov_college)

```

```{r}
#reading the all india dynast data

tcpd_dyn = read.csv("/Users/najah/work/cpr/data/tcpd_ge_dyn_23.csv")
##head(tcpd_dyn)

# ordering the data
tcpd_dyn = tcpd_dyn %>% arrange(state_name, year, constituency_no, position)
```

```{r}
#cleanining the names in the tcpd data to merge with the college data

tcpd_dyn = tcpd_dyn %>%
  #replaces & with and
  mutate(state_name = str_replace(state_name,  "&", "and")
         #transforms to lowercase
         ,state_name = tolower(state_name),
          #removes the white space
         state_name= str_trim(state_name))


# recoding empty ones and recheck as dyn

tcpd_dyn$dyn = as.numeric(tcpd_dyn$dyn)

tcpd_dyn$dynast = ifelse(is.na(tcpd_dyn$dyn) | tcpd_dyn$dyn==0,0,1)




```

```{r}
# add a col that indicates the second position familty type


tcpd_dyn = tcpd_dyn %>% group_by(state_name, year, constituency_no) %>% 
  mutate(second_position_dyn = sum(dynast[position==2]) )%>% 
  ungroup()


#tcpd_dyn[,c("position","dynast", "second_position_dyn")]

#filter to winner to keep observation per constituency
dyn_1 = tcpd_dyn %>% filter(position==1)

# creating the contest variable

position = dyn_1$position
second_position = dyn_1$second_position_dyn
winner = dyn_1$dynast


dyn_1$dyn_type = ifelse(winner==1 & second_position==0, "dyn vs non-dyn",ifelse(winner==0 &second_position==1, "non-dyn vs dyn", "others"))

dyn_1[,c("dynast", "second_position_dyn", "dyn_type")][10:15,]

```

```{r}

#merging the dataset 

dyn_college<- left_join( dyn_1,college_pc, by = c( "state_name"="state",   "year"="year_el",
                                                     "constituency_no"="pc_no"))

#filling constituencies with NA vlaue to zero - since there was no college established during this time

dyn_college$n_college = ifelse(is.na(dyn_college$n_college),0,dyn_college$n_college)

dyn_college$n_gov = ifelse(is.na(dyn_college$n_gov),0,dyn_college$n_gov)


# creating a variable with number of private colleges

dyn_college$n_priv = abs(dyn_college$n_college-dyn_college$n_gov)


```

## merged data

This df contains number of colleges established in each year for every constituency from 1989-2019 along with the information about the winner of the constituency

```{r}
summary(dyn_college$n_college)
```

```{r}
# distribution of the number of colleges
hist(dyn_college$n_college, main= "distribution of all colleges")
hist(dyn_college$n_gov, main = "distribution of government colleges")

```

-   a huge number of constituencies have zero number of constituncies established for some of the years
-   not normal distribution

```{r}
## understanding the dynast data
table(dyn_college$dynast)
```

```{r}
### average number of colleges 
print(mean(dyn_college$n_college))

print(median(dyn_college$n_college))
```

```{r}

# mean and median number of colleges by dynast

dyn_college %>% group_by(dynast) %>% 
  summarise(mean_colleges = mean(n_college),
            meadian_colleges = median(n_college))

```

```{r}
yearwise_college = dyn_college %>% group_by(year,dynast) %>% 
  summarise(mean_college = mean(n_college)) %>% 
  
  tidyr::pivot_wider(names_from = dynast, values_from = mean_college) %>% 
  rename( "dynast"= `1`, "non-dynast" = `0`)

yearwise_college
```

```{r}
## need to noramlise college

#per million electors

# dyn_college$n_college_million = dyn_college$n_college/(dyn_college$electors/1000000)

dyn_college$n_college_million = dyn_college$n_college*1000000/dyn_college$electors

dyn_college$n_gov_million = dyn_college$n_gov*1000000/dyn_college$electors

dyn_college$n_priv_million = dyn_college$n_priv*1000000/dyn_college$electors

```





## General regression 

::: {.panel-tabset}

### Poisson

-   please suggest the covariates to be added
-   added 3 different models: all colleges, government, private
-   controls needed for existing level fo development and education, hilly areas ( construction is difficult)
-   for education : number of schools - is historic data available?
-   for dev - night light (1993-2013)
-   what data is available from 1989 for control
-   adding constituency type as a control

```{r warning=FALSE}

# all  colleges  model  
fit_all <- glm(n_college_million~dynast+ constituency_type+enop+turnout_percentage +factor(year)+factor(state_name), family = "poisson", data = dyn_college)


# govt colleges only model    
fit_gov = glm(n_gov_million~dynast+constituency_type+enop+turnout_percentage+factor(year)+factor(state_name), family = "poisson", data = dyn_college)

# private colleges only model  
fit_priv = glm(n_priv_million~dynast+constituency_type+enop+turnout_percentage+factor(year)+factor(state_name), family = "poisson", data = dyn_college)
#summary(model)


addlines <- list(c('Fixed effects - Year' ,"TRUE", "TRUE", "TRUE" ), c("Fixed Effects - State", "TRUE", "TRUE", "TRUE"))
stargazer::stargazer(fit_all, fit_gov,fit_priv,type = "text",keep = c("dynast", "(Intercept)", "n_gov", "constituency_type", "enop", "turnout_percentage"), add.lines = addlines)


```

### OLS

```{r warning=FALSE}

# all  colleges  model  
fit_all <- lm(n_college_million~dynast+ constituency_type+enop+turnout_percentage +factor(year)+factor(state_name),  data = dyn_college)


# govt colleges only model    
fit_gov = lm(n_gov_million~dynast+constituency_type+enop+turnout_percentage+factor(year)+factor(state_name),  data = dyn_college)

# private colleges only model  
fit_priv = lm(n_priv_million~dynast+constituency_type+enop+turnout_percentage+factor(year)+factor(state_name), data = dyn_college)
#summary(model)


addlines <- list(c('Fixed effects - Year' ,"TRUE", "TRUE", "TRUE" ), c("Fixed Effects - State", "TRUE", "TRUE", "TRUE"))
stargazer::stargazer(fit_all, fit_gov,fit_priv,type = "text",keep = c("dynast", "(Intercept)", "n_gov", "constituency_type", "enop", "turnout_percentage"), add.lines = addlines)


```


:::


## RDD

-   Really need to brush up the concept (out of touch)

```{r}
# prepping the data


dyn_college = dyn_college %>% 
  mutate(margin_5pc = ifelse(margin_percentage<=5,1,0),
        margin_2.5pc =ifelse(margin_percentage<=2.5,1,0),
        margin_10pc =ifelse(margin_percentage<=10,1,0))


dyn_college[, c("margin_percentage", "margin_2.5pc", "margin_5pc", "margin_10pc")][1:5,]
```

```{r}
# breakup of all constituencies wrt margin

margin_table= dyn_college %>% summarise_at(c("margin_2.5pc", "margin_5pc", "margin_10pc"), sum, na.rm =TRUE)

margin_table


```

```{r}

# break-up for contest types

margin_table= dyn_college %>% group_by(dyn_type)%>% summarise_at(c("margin_2.5pc", "margin_5pc", "margin_10pc"), sum, na.rm =TRUE)
margin_table
```

```{r}

dyn_college_rdd = dyn_college %>% filter(dyn_type!= "others")

dyn_college_rdd = dyn_college_rdd%>% filter(margin_percentage<=10 ) %>% 
  mutate(mv_rdd = ifelse(dyn_type=="non-dyn vs dyn", -margin_percentage, margin_percentage))
```

```{r warning=FALSE}

## rdd graph
library(ggplot2)
ggplot(dyn_college_rdd,  aes(mv_rdd,n_college , color = dyn_type))+
  geom_point()+
   ylim(0,10)+
    geom_smooth(method="glm", se= FALSE)+
  geom_vline(xintercept = 0)+
    # scale_color_grey(labels = c("non-family winner", "family winner"))+
   labs(x = "Margin of victory", y = "n collegs per million population",
        caption = "note: collegesbuilt in year in a parliamentary constituency")+
   theme_bw()+
  theme(legend.position = "bottom", legend.title = element_blank())
  #ylim(0,10)

```









## RDD Models 


::: {.panel-tabset}


### Poisson

```{r warning=FALSE}
## rdd regression
fit2.5 <- glm(n_college_million~relevel(as.factor(dyn_type), ref = "non-dyn vs dyn"), data = subset(dyn_college_rdd %>% filter(margin_2.5pc ==1)),family = "poisson")

fit5 <- glm(n_college_million~relevel(as.factor(dyn_type), ref = "non-dyn vs dyn"), data = subset(dyn_college_rdd %>% filter(margin_5pc ==1)), family = "poisson")

fit10 <- glm(n_college_million~relevel(as.factor(dyn_type), ref = "non-dyn vs dyn"), data = subset(dyn_college_rdd %>% filter(margin_10pc ==1)),family = "poisson")



stargazer::stargazer(fit2.5,fit5, fit10, type = "text", omit = "Constant", column.labels = c("2,5","5","10"), covariate.labels = c("dynast winner") )


```

```{r warning=FALSE}
## rdd regression private colleges

fit2.5 <- glm(n_priv_million~relevel(as.factor(dyn_type), ref = "non-dyn vs dyn"), data = subset(dyn_college_rdd %>% filter(margin_2.5pc ==1)),family = "poisson")

fit5 <- glm(n_priv_million~relevel(as.factor(dyn_type), ref = "non-dyn vs dyn"), data = subset(dyn_college_rdd %>% filter(margin_5pc ==1)), family = "poisson")

fit10 <- glm(n_priv_million~relevel(as.factor(dyn_type), ref = "non-dyn vs dyn"), data = subset(dyn_college_rdd %>% filter(margin_10pc ==1)),family = "poisson")



stargazer::stargazer(fit2.5,fit5, fit10, type = "text", omit = "Constant", column.labels = c("2,5","5","10"), covariate.labels = c("dynast winner") )


```

```{r warning=FALSE}
## rdd regression govt. colleges

fit2.5 <- glm(n_gov_million~relevel(as.factor(dyn_type), ref = "non-dyn vs dyn"), data = subset(dyn_college_rdd %>% filter(margin_2.5pc ==1)),family = "poisson")

fit5 <- glm(n_gov_million~relevel(as.factor(dyn_type), ref = "non-dyn vs dyn"), data = subset(dyn_college_rdd %>% filter(margin_5pc ==1)), family = "poisson")

fit10 <- glm(n_gov_million~relevel(as.factor(dyn_type), ref = "non-dyn vs dyn"), data = subset(dyn_college_rdd %>% filter(margin_10pc ==1)),family = "poisson")



stargazer::stargazer(fit2.5,fit5, fit10, type = "text", omit = "Constant", column.labels = c("2,5","5","10"), covariate.labels = c("dynast winner") )


```


### OLS

```{r warning=FALSE}
## rdd regression
fit2.5 <- lm(n_college_million~relevel(as.factor(dyn_type), ref = "non-dyn vs dyn"), data = subset(dyn_college_rdd %>% filter(margin_2.5pc ==1)))

fit5 <- lm(n_college_million~relevel(as.factor(dyn_type), ref = "non-dyn vs dyn"), data = subset(dyn_college_rdd %>% filter(margin_5pc ==1)))

fit10 <- lm(n_college_million~relevel(as.factor(dyn_type), ref = "non-dyn vs dyn"), data = subset(dyn_college_rdd %>% filter(margin_10pc ==1)))



stargazer::stargazer(fit2.5,fit5, fit10, type = "text", omit = "Constant", column.labels = c("2,5","5","10"), covariate.labels = c("dynast winner") )


```

```{r warning=FALSE}
## rdd regression private colleges

fit2.5 <- lm(n_priv_million~relevel(as.factor(dyn_type), ref = "non-dyn vs dyn"), data = subset(dyn_college_rdd %>% filter(margin_2.5pc ==1)))

fit5 <- lm(n_priv_million~relevel(as.factor(dyn_type), ref = "non-dyn vs dyn"), data = subset(dyn_college_rdd %>% filter(margin_5pc ==1)))

fit10 <- lm(n_priv_million~relevel(as.factor(dyn_type), ref = "non-dyn vs dyn"), data = subset(dyn_college_rdd %>% filter(margin_10pc ==1)))



stargazer::stargazer(fit2.5,fit5, fit10, type = "text", omit = "Constant", column.labels = c("2,5","5","10"), covariate.labels = c("dynast winner") )


```

```{r warning=FALSE}
## rdd regression govt. colleges

fit2.5 <- lm(n_gov_million~relevel(as.factor(dyn_type), ref = "non-dyn vs dyn"), data = subset(dyn_college_rdd %>% filter(margin_2.5pc ==1)))

fit5 <- lm(n_gov_million~relevel(as.factor(dyn_type), ref = "non-dyn vs dyn"), data = subset(dyn_college_rdd %>% filter(margin_5pc ==1)))

fit10 <- lm(n_gov_million~relevel(as.factor(dyn_type), ref = "non-dyn vs dyn"), data = subset(dyn_college_rdd %>% filter(margin_10pc ==1)))



stargazer::stargazer(fit2.5,fit5, fit10, type = "text", omit = "Constant", column.labels = c("2,5","5","10"), covariate.labels = c("dynast winner") )


```
:::
